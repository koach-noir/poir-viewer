name: Release

# 環境変数の定義
env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.4.1'
  RUST_TOOLCHAIN: 'stable'
  DRAFT_RELEASE: true  # リリースをドラフトとして作成するかどうか
  PRERELEASE: false    # プレリリースとしてマークするかどうか

# トリガー条件
on:
  push:
    tags:
      - 'v*'
  # 手動リリース作成のオプション
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.0.0)'
        required: true
        type: string
      platform:
        description: 'Release platform (all, windows, macos, linux)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - linux

jobs:
  # リリース作成ジョブ
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # タグからバージョンを取得
      - name: Get version from tag
        id: get-version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      # 手動入力からバージョンを取得
      - name: Get version from input
        id: get-input-version
        if: github.event_name == 'workflow_dispatch'
        run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
      
      # 最終バージョンを設定
      - name: Set final version
        id: set-version
        run: |
          if [ "${{ steps.get-version.outputs.version }}" != "" ]; then
            echo "version=${{ steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get-input-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      # リリース作成（GitHub Scriptを使用した最新の方法）
      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `Release v${process.env.VERSION}`,
              draft: ${{ env.DRAFT_RELEASE }},
              prerelease: ${{ env.PRERELEASE }},
              generate_release_notes: true
            });
            
            core.setOutput('id', data.id);
            core.setOutput('upload_url', data.upload_url);
            return data;
        env:
          VERSION: ${{ steps.set-version.outputs.version }}

  # ビルドとリリースアセット作成ジョブ
  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            name: windows
            artifact_name: image-viewer_Windows_x64
            binary_path: "src-tauri/target/release/image-viewer.exe"
            asset_name: image-viewer-windows-x64
          - platform: macos-latest
            name: macos
            artifact_name: image-viewer_macOS_x64
            binary_path: "src-tauri/target/release/image-viewer"
            asset_name: image-viewer-macos-x64
          - platform: ubuntu-latest
            name: linux
            artifact_name: image-viewer_Linux_x64
            binary_path: "src-tauri/target/release/image-viewer"
            asset_name: image-viewer-linux-x64
    
    # 手動実行で特定のプラットフォームが選択された場合、その条件に合致するものだけを実行
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.name || github.event_name == 'push' }}
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js環境の設定
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # pnpmのインストールと設定
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      # Rust環境の設定
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      # Windows固有の設定
      - name: Install WebView2 (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          $installer = "$env:TEMP\MicrosoftEdgeWebView2Setup.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installer
          Start-Process -FilePath $installer -Args "/silent /install" -Verb RunAs -Wait
      
      # macOS固有の設定
      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          brew install jq
      
      # Linux固有の設定
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      
      # Tauri CLIのインストール
      - name: Install Tauri CLI
        run: pnpm add -D @tauri-apps/cli
      
      # アプリのビルドと署名
      - name: Build the app
        id: build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # バージョン情報を環境変数として設定
          APP_VERSION: ${{ needs.create-release.outputs.version }}
        run: |
          echo "Building version $APP_VERSION for ${{ matrix.name }}"
          pnpm tauri build
      
      # リリースアーカイブの作成
      - name: Create release archives
        id: create-archives
        shell: bash
        run: |
          mkdir -p release-archives
          
          # プラットフォームに応じたファイル処理
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            # Windows インストーラーを移動
            cp src-tauri/target/release/bundle/msi/*.msi release-archives/${{ matrix.asset_name }}.msi
            cp src-tauri/target/release/bundle/nsis/*.exe release-archives/${{ matrix.asset_name }}-setup.exe
            echo "Created Windows installers"
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            # macOS バンドルを移動
            cp -r src-tauri/target/release/bundle/dmg/*.dmg release-archives/${{ matrix.asset_name }}.dmg
            echo "Created macOS DMG"
            
            # Universal Binary ビルド結果を移動 (もし設定していれば)
            if [ -d "src-tauri/target/universal-apple-darwin/release/bundle/dmg" ]; then
              cp -r src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg release-archives/${{ matrix.asset_name }}-universal.dmg
              echo "Created Universal macOS DMG"
            fi
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            # Linux パッケージを移動
            cp src-tauri/target/release/bundle/deb/*.deb release-archives/${{ matrix.asset_name }}.deb
            cp src-tauri/target/release/bundle/appimage/*.AppImage release-archives/${{ matrix.asset_name }}.AppImage
            echo "Created Linux packages"
          fi
          
          # ファイル一覧を表示
          echo "Created files:"
          ls -la release-archives/
      
      # アーティファクトのアップロード
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release-archives
          retention-days: 7

  # リリースアセットの公開ジョブ
  publish-release:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          echo "Prepared release assets:"
          ls -la release-assets/
      
      # GitHub Scriptを使用してリリースアセットをアップロード
      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // リリースアセットのディレクトリ
            const assetDir = 'release-assets';
            const files = fs.readdirSync(assetDir);
            
            // 各ファイルをリリースにアップロード
            for (const file of files) {
              const filePath = path.join(assetDir, file);
              
              console.log(`Uploading ${filePath}...`);
              
              // ファイルをリリースにアップロード
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-release.outputs.release_id }},
                name: file,
                data: fs.readFileSync(filePath)
              });
            }
            
            console.log('All assets uploaded successfully!');

      # リリース結果の通知
      - name: Notify release completion
        run: |
          echo "✅ Release v${{ needs.create-release.outputs.version }} has been published!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}"
          
          if [[ "${{ env.DRAFT_RELEASE }}" == "true" ]]; then
            echo "This is a draft release. Please review and publish it manually."
          fi
