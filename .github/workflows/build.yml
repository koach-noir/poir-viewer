name: Build Application

on:
  push:
    branches: [ main ]
    # コミットメッセージに [build] タグがあるときのみ実行
    paths-ignore:
      - '**.md'
      - 'docs/**'
    tags-ignore:
      - 'v*'  # タグがプッシュされた場合は実行しない (release.ymlが担当)
  pull_request:
    branches: [ main ]
  # 手動実行のオプション
  workflow_dispatch:
    inputs:
      platform:
        description: 'Build platform (all, windows, macos, linux)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - linux

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべてのコミット履歴をフェッチ
      - id: check
        run: |
          echo "GitHub Event: ${{ github.event_name }}"
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit Message: $COMMIT_MSG"
          
          # 手動実行の場合は常に実行
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual dispatch - always run"
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # コミットメッセージをチェック（大文字小文字を区別しない）
          if [[ "${COMMIT_MSG^^}" == *"[BUILD]"* ]]; then
            echo "Build tag detected"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "No build tag"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
          
          # 不確定な状態の場合はデフォルトで実行
          if [[ "${{ steps.check.outputs.should-run }}" == "" ]]; then
            echo "Defaulting to run due to uncertain state"
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
        
  build:
    needs: check-commit-message
    # check-commit-messageジョブの結果に基づいて実行するかどうかを決定
    if: ${{ needs.check-commit-message.outputs.should-run == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - platform: windows-latest
            name: windows
          - platform: macos-latest
            name: macos
          - platform: ubuntu-latest
            name: linux
    
    # 手動実行で特定のプラットフォームが選択された場合のフィルタリング
    # すでにcheck-commit-messageでワークフロー全体の実行可否は判断しているので
    # ここではプラットフォームの選択だけをフィルタリング
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check platform selection
        # 手動実行時のプラットフォーム選択をチェック
        # 選択されたプラットフォームのみを実行
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.platform != 'all' && github.event.inputs.platform != matrix.name }}
        run: |
          echo "Skipping build for ${{ matrix.name }} platform as per selection"
          exit 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.4.1
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      # Windows固有の設定
      - name: Install WebView2
        if: matrix.platform == 'windows-latest'
        run: |
          $installer = "$env:TEMP\MicrosoftEdgeWebView2Setup.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $installer
          Start-Process -FilePath $installer -Args "/silent /install" -Verb RunAs -Wait
      
      # macOS固有の設定
      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          brew install jq
      
      # Linux固有の設定
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Install Tauri CLI
        run: pnpm add -D @tauri-apps/cli
      
      - name: Show Node.js and pnpm versions
        run: |
          node --version
          pnpm --version
          cat package.json
          cat pnpm-lock.yaml
          
      - name: Build the app
        run: pnpm tauri build
      
      # Windows用アーティファクトのアップロード
      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
      
      # macOS用アーティファクトのアップロード
      - name: Upload macOS artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
      
      # Linux用アーティファクトのアップロード
      - name: Upload Linux artifacts
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
